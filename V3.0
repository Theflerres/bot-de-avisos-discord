import discord
from discord.ext import commands
import sqlite3
from datetime import datetime
import os

# Configura√ß√£o do bot
TOKEN = "meu_token_porra"  # Substitua pelo token do seu bot
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Caminho para a pasta de logs
LOG_FOLDER = r"C:\Users\jg202\OneDrive\√Årea de Trabalho\database"
LOG_FILE = os.path.join(LOG_FOLDER, "warns_log.txt")

# Criar a pasta de logs se n√£o existir
if not os.path.exists(LOG_FOLDER):
    os.makedirs(LOG_FOLDER)

# Conectar ao banco de dados SQLite
conn = sqlite3.connect("warns.db")
cursor = conn.cursor()

# Criar tabela se n√£o existir
cursor.execute("""
CREATE TABLE IF NOT EXISTS warns (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    guild_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    moderator_id INTEGER NOT NULL,
    reason TEXT NOT NULL
)
""")
conn.commit()

# Fun√ß√£o para verificar se o usu√°rio tem permiss√£o
ALLOWED_ROLES = [1282146997909979136, 1282147756814766132]

def has_permission(ctx):
    return any(role.id in ALLOWED_ROLES for role in ctx.author.roles)

# Fun√ß√£o para adicionar log de advert√™ncia
def add_warn_log(staff_name, user_name, reason):
    now = datetime.now()
    log_entry = f"{now.strftime('%d/%m/%Y %H:%M:%S')}\n"
    log_entry += f"Staff: {staff_name}\n"
    log_entry += f"- Usu√°rio: {user_name}\n"
    log_entry += f"- Motivo: {reason}\n"
    log_entry += "-" * 30 + "\n"  # Separador entre logs

    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

# Fun√ß√£o para adicionar advert√™ncia
@bot.command(name="adv")
@commands.check(has_permission)
async def adv(ctx, user: discord.Member, *, reason: str):
    # Adicionar advert√™ncia ao banco de dados
    cursor.execute("""
    INSERT INTO warns (guild_id, user_id, moderator_id, reason)
    VALUES (?, ?, ?, ?)
    """, (ctx.guild.id, user.id, ctx.author.id, reason))
    conn.commit()

    # Adicionar log da advert√™ncia
    add_warn_log(ctx.author.name, user.name, reason)

    # Contar o n√∫mero de advert√™ncias do usu√°rio
    cursor.execute("SELECT COUNT(*) FROM warns WHERE guild_id = ? AND user_id = ?", (ctx.guild.id, user.id))
    warn_count = cursor.fetchone()[0]

    # Criar a string de emojis ‚ùå
    x_emojis = "‚ùå " * warn_count

   # Enviar mensagem ao usu√°rio
    embed = discord.Embed(
        title="Advert√™ncia",
        description=f"Usu√°rio: {user.mention}\nMotivo: {reason}\n{x_emojis}",
        color=discord.Color.red()
    )
    await user.send(embed=embed)

    # Enviar mensagem no canal
    embed = discord.Embed(
        title="Advert√™ncia",
        description=f"Usu√°rio: {user.mention}\nMotivo: {reason}\n{x_emojis}",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed)

# Fun√ß√£o para ver advert√™ncias
@bot.command(name="advs")
@commands.check(has_permission)
async def warns(ctx, user: discord.Member):
    # Buscar advert√™ncias do usu√°rio
    cursor.execute("SELECT moderator_id, reason FROM warns WHERE guild_id = ? AND user_id = ?", (ctx.guild.id, user.id))
    warns = cursor.fetchall()

    if not warns:
        await ctx.send(f"{user.mention} n√£o tem advert√™ncias.")
        return

    # Construir mensagem com as advert√™ncias
    embed = discord.Embed(
        title=f"Advert√™ncias de {user.name}",
        color=discord.Color.blue()
    )
    for i, (moderator_id, reason) in enumerate(warns, 1):
        moderator = ctx.guild.get_member(moderator_id)
        embed.add_field(
            name=f"Advert√™ncia {i}",
            value=f"Moderador: {moderator.name if moderator else 'Desconhecido'}\nMotivo: {reason}",
            inline=False
        )

    await ctx.send(embed=embed)

# Fun√ß√£o para remover uma advert√™ncia
@bot.command(name="remove-adv")
@commands.check(has_permission)
async def remove_adv(ctx, user: discord.Member, warn_index: int):
    # Buscar advert√™ncias do usu√°rio
    cursor.execute("SELECT id FROM warns WHERE guild_id = ? AND user_id = ?", (ctx.guild.id, user.id))
    warns = cursor.fetchall()

    if not warns:
        await ctx.send(f"{user.mention} n√£o tem advert√™ncias.")
        return

    # Verificar se o √≠ndice √© v√°lido
    if warn_index < 1 or warn_index > len(warns):
        await ctx.send("√çndice de advert√™ncia inv√°lido.")
        return

    # Remover a advert√™ncia
    warn_id = warns[warn_index - 1][0]
    cursor.execute("DELETE FROM warns WHERE id = ?", (warn_id,))
    conn.commit()

    await ctx.send(f"Advert√™ncia {warn_index} de {user.mention} foi removida.")

# Fun√ß√£o para remover todas as advert√™ncias
@bot.command(name="remove-all-advs")
@commands.check(has_permission)
async def remove_all_advs(ctx, user: discord.Member):
    # Remover todas as advert√™ncias do usu√°rio
    cursor.execute("DELETE FROM warns WHERE guild_id = ? AND user_id = ?", (ctx.guild.id, user.id))
    conn.commit()

    await ctx.send(f"Todas as advert√™ncias de {user.mention} foram removidas.")

# Evento de inicializa√ß√£o
@bot.event
async def on_ready():
    print(f"‚úÖ Bot {bot.user.name} est√° online!")

# Tratamento de erros para comandos restritos
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.send("üö´ Voc√™ n√£o tem permiss√£o para usar este comando.")

# Iniciar o bot
bot.run(TOKEN)
